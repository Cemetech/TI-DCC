.module DCC
.local
_modulestart:

IvtLocation	.equ	080h ; vector table at 8000h
IsrLocation	.equ	85h ; ISR at TextShadPtrs

periodA .equ 1 
periodB .equ 1 << 1

;.varloc appData,256 ; Used by IVT
.varloc usermem,244  ;A60B-A6FF
BitMask_LookupTables .equ $A700

.struct dccStateStruct      ;Digital Command Station State Vars
    .var 2, msgPTR    ;pointer to current message being processed
    .var 1, size     ;current bit "count" 
    .var 1, curDat    ;Current shifted data byte
    .var 1, flags     ;bit mask
                      ; b0 = Output Link Mirror Bit
                      ; b1 = Line Power control      -- needs to be implemented!
                      ; b2 = Period A/B
                      ; b3 = Forward/Reverse
                      ; b4 = Address Size
    .var 1, waitCTR   ;Set to 255 for pausing between packets ~15ms   
    .var 1, repeat    ; 0-254 times, 255 until changed
    .var 2,address
.endstruct 

OutputMirror = 0
LinePowerControl = 1
PeriodAB = 2
Direction = 3
AddressSize = 4
;Default initializations for queueing message
; <ptr>
; 0 
; Preferabbly 0xFF
; 0
; 0 

.struct dccPacketStruct   ;https://www.nmra.org/sites/default/files/s-9.2.1_2012_07.pdf
    .var 1, size      ;number of data bits in this packet-1
    .var 1, data1     ;packet bytes
    .var 1, data2     ;
    .var 1, data3     ;
    .var 1, data4     ;
    .var 1, data5     ;
    .var 1, data6     ; error == address ^ data
    .var 1, data7     ; error == address ^ data
    .var 1, data8     ; error == address ^ data
    .var 1, data9     ; error == address ^ data
.endstruct

.var dccStateStruct, dccstate
.var dccPacketStruct, dccIdlePacket
.var dccPacketStruct, dccUserPacket
.endlocal

.var 10,packetGenScratch
.var 1,maxbits
.var 1,func


init:
SetUpInterrupt:
    di
    xor a
    out (pIntMask), a
    out (pCrstlTmr1Freq), a
    out (pCrstlTmr2Freq), a
    out (pCrstlTmr3Freq), a
    out (pLnkAstSeEnable), a
    ; And kill USB ~Copied from KermM
    out (57h), a
    out (5Bh), a
    out (4Ch), a
    ld  a, 2
    out (54h), a
    
    ; Custom Interrupts
    ld  hl, IvtLocation*256
    ld  de, IvtLocation*256+1
    ld  bc, 256
    ld  a, IvtLocation
    ld  i, a
    ld  a, IsrLocation
    ld  (hl), a
    ldir
 
    ld  hl, InterruptServiceRoutineEnter
    ld  de, IsrLocation*256+IsrLocation
    ld  bc, 3
    ldir
    
    ld a,82h                ; Set to CPU_FREQ/4 to Port $30
    out (pCrstlTmr1Freq),a
    ld a,%00000011          ; Set timer interrupt + loop to Port $31
    out (pCrstlTmr1Cfg),a
    ld a,218                ; Set loop period for ~58us at 15MHz to Port $32
    out (pCrstlTmr1Count),a
    im 2
    
    ld de,BitMask_LookupTables
    call generateLUT             ;set up lut for interrupts
    
    ex af,af'
    xor a
    ex af,af'               ;Zero wait
    xor a
    ld (dccState.flags),a
    ld (dccState.size),a
    ld (dccState.waitCTR),a
    ld hl,idlePacket
    ld (dccState.msgPTR),hl
    ld a,255
    ld (dccState.repeat),a
    ld (dccState.curDat),a
    ei
    ret
    
InterruptServiceRoutineEnter:
    jp InterruptServiceRoutine
InterruptServiceRoutine:
    ex af,af'               
        exx
            ld bc,(%00000011 << 8)+pCrstlTmr1Cfg ;
            out (c),b                ;17cc Faster then PushPop
            
            or a                     ;If != Zero.
            jp nz,doWait
            
            ld a,(dccState.flags)
            out (0),a                ;Output bits to port 
            bit PeriodAB,a                  ;Check period
            ld a,(dccState.curDat)   ;Load A with current data being processed
            jp nz,doPeriodB          ;If Z We are period A   
doPeriodA:
            or a                     ;Check current data Bit
            jp nz,_notZeroBit1       ;If Z set wait
            ld a,1  
            ld (dccState.waitCTR),a  ;Load Wait
_notZeroBit1:  
            ld a,periodB             ;Set period and Output Link Mirror Bit
            ld (dccState.flags),a    ;to %00000010
            jp doIntEnd
doPeriodB:
            or a                     ;Check current data bit
            jp nz,_notZeroBit2       ;If Z set Wait
            ld a,1                   ;
            ld (dccState.waitCTR),a  ;Load Wait
_notZeroBit2:  
            ld a,periodA             ;Set period and Output Link Mirror Bit
            ld (dccState.flags),a    ;to %00000001
stateBEnd:

            ld hl,(dccState.msgPTR)
            inc hl
            ld a,(dccState.size)
            ld e,a
            ld d,BitMask_LookupTables>>8
            ld a,(de) \	inc d        ;First LUT is for(i=0;i<256;i++) arr1[i] = (i>>3)&7;
            add a,L
            ld L,a
            jr nc,$+3
            inc h
            ld a,(de)                ;Second LUT is for(i=0;i<256;i++) arr2[i] = 1<<(i&7);
            and (hl)
           
            ld (dccState.curDat),a
            
            ld hl,(dccState.msgPTR)  
            ld a,(dccState.size)
            cp (hl)                     ;sub max from current
            ;if zero
            jp z,checkRepeat            ;If 0 we have sent the packet
            inc a
            ld (dccState.size),a        ;Store the size back for next call
doIntEnd:   
            ld a,(dccState.waitCTR)     ;waitCTR is set in loop or at last wait count
        exx
    ex af,af'
    ei
    ret
    
checkRepeat:                            ;If repeat !=0 repeat packet send
            ld a,(dccState.repeat)
            cp 255
            jp z,repeatEntry            ;If repeat is 255 requeue
            or a                        
            jp loadIdleAfterRepeat      ;If repeat is zero load idle packet
            dec a
            ld (dccState.repeat),a      ;Else Dec and store repeat
repeatEntry:
            xor a
            ld (dccState.size),a        ;reset packet
            ld (dccState.flags),a
            ld a,1
            ld (dccState.waitCTR),a     ;Needs code to handle DC mode
            jp doWait                   ;no need to rest curdat is already 1
            
            
loadIdleAfterRepeat:
            xor a
            ld (dccState.flags),a
            ld (dccState.size),a
            ld hl,idlePacket
            ld (dccState.msgPTR),hl
            ld a,255
            ld (dccState.waitCTR),a
            ld (dccState.repeat),a
            ld (dccState.curDat),a
doWait:
            dec a
            ld (dccState.waitCTR),a ;Save wait
        exx
    ex af,af'
    ei
    ret
;Handles setting direction bit. Do we want to play with the throttle here?
handleReverser:
    ld hl,dccState.Flags
    cp ctrl.DIR_REVERSE
    jp nz,_dirForward
_dirReverse:
    set 3,(hl)
    ret
_dirForward:
    res 3,(hl)
    ret
    
    
handleThrottle:
    ld hl,dccState.Flags
    ld a,d
    cp 2
    jp z,_128Speed
    or a
    jp nz,_28Speed
_14Speed:
    ld a,%01000000
    bit Direction,(hl)
    jp z,_setReverse14
_setForward14:
    set 5,a          ;%01D00000
_setReverse14:
    dec e            ;Set to -1-13
    jp m,_setStop
    inc e \ inc e
    or e             ;%01DXSSSS 
_setStop:
    ld b,e
    ld c,2
_JPBasedOffAddressSize:
    bit AddressSize,(hl) ;z for short address
    jp nz,_LongAddress
_ShortAddress
    ld a,(dccState.address)
    jp dccSendShort1D
_LongAddress:
    ld hl,(dccState.address)
    jp dccSendLongSpeed
    
    
    
_28Speed:  ;speed in E
    ld a,%00010000
    and e
    add a,254          ;anything over 239
    rl e
    and %00011111
    bit Direction,(hl)
    jp nz,_setReverse28 ; Leave res for reverse
_setForward28:
    set 5,e          ;%XXD43210
_setReverse28:       
    ld b,e
    set 6,b
    ld c,2
    jp _JPBasedOffAddressSize 
    
    
_128Speed:
    ;Handle the sane speed packet
    ;need to implement 4/5byte packets first though so 
    ;ABORT
    ret
    
handleFunction:
    ret
    
PreparePacket:
    ;In e,amount of bytes in packet
    ;packetGenScratch packet bytes
    ld b,e                 ;save bytes in structure
    sla e \ sla e \ sla e  ; *8 == bitcount
    dec b                  ;ASSUME first byte is part of the preamble and gets no seperator
                           ; we loop from packet end
    ld hl,packetGenScratch  
    ld c,$FF
_PreparepacketLoop:
    push de
        push bc
            push hl             ;Move in 8bits and insert next bit
                call insertBit  ;Call insert bits saving all registers
            pop hl
        pop bc
    pop de
    ld a,e
    sub 8
    ld e,a            ;Move to next byte
    ld c,0              ;Set c to insert 0 bits
    djnz _preparepacketLoop
    ret
    
<<<<<<< HEAD
dccSendShort1D:  ;in b,data a,address c,repeat
    di
    ld (packetGenScratch+2),a      ;Save Address
    xor b
    ld (packetGenScratch+4),a      ;Save error
    ld a,b
    ld (packetGenScratch+3),a      ;save speed command
    ld a,255
    ld (packetGenScratch),a
    ld (packetGenScratch+1),a      ;Save Preamble
    ld (dccState.curDat),a
       
    ld a,c
    ld (dccState.repeat),a         ;save repeat count
    
    ld e,b
    call preparePacket
    
    ld de,dccUserPacket+1
    ld hl,packetGenScratch
    ld bc,10
    ldir
    
    xor a
    ld (dccState.flags),a
    ld (dccState.size),a   ;Size is actually current bit count...really need to rename this
    ld hl,dccUserPacket
    ld (hl),44                  ;Size will always be 44 for a 3byte packet
    ld (dccState.msgPTR),hl
    ei
    ret
=======
dccSendShort3byte:  ;in b,data a,address c,repeat
	di
	ld hl,packetGenScratch+4
	ld e,a
	xor b
	ld (hl),a ;+4 Error
	dec hl
	ld (hl),b ;+3 Speed command
	dec hl
	ld (hl),e ;+2 Address
	dec hl
	ld a,255
	ld (hl),a ;+1 preamble
	dec hl
	ld (hl),a ;+0 preamble
	ld (dccState.curDat),a
	
	ld a,c
	ld (dccState.repeat),a
	
	push hl
		ld e,b
		call PreparePacket
		xor a
		ld hl,dccUserPacket
		ld (hl),44
		ld (dccState.msgPTR),hl
		inc hl
		ex de,hl
	pop hl
	ld bc,10
	ldir
	ei
	ret ;48 bytes

>>>>>>> dac1ff69333af1f7cd09c270ecc9b5ab9a38b1e2
dccSendLongSpeed:
    ret ;To be done
    
generateLUT:  ;in: DE=starting address. Must be 256-byte aligned.
	ld a,e
	rrca \ rrca \ rrca
	and 7
	ld (de),a
	ld a,e
	inc d
	cpl
	and 7
	ld b,a
	ld c,0
	ld a,1
	jr z,_genLutNoShift
_genLutShiftLeft:
	scf \ rl c
	rlca
	djnz _genLutShiftLeft
_genLutNoShift:
	ld (de),a
	inc d
	ld a,c
	ld (de),a
	dec d
	dec d
	inc e
	jr nz,generateLUT
	ret
    
;E = bitpos to insert
;C=0 to insert 0, C=$FF to insert 1. Destroys all registers
insertBit:  
    ld a,8*10
    ld (maxbits),a
	ld d,BitMask_LookupTables>>8
	ld a,(de)
	inc d       ;First LUT is: for(i=0;i<256;i++) arr1[i] = (i>>3)&7;
	add a,L
	ld L,a
	jr nc,$+3
	inc h       ;get address we need to perform insert op on
	inc c
	ld a,(de)   ;fetch masking bit. for(i=0;i<256;i++) arr2[i] = 1<<((~i)&7);
	jr z,insertBit1
insertBit0:
	cpl
	and (hl)    ;clear bit.
	ld (hl),a
	jr insertBitCont
insertBit1:
	or (hl)
	ld (hl),a   ;set bit
insertBitCont:
	inc d       ;Third LUT: Mask to keep bits. 7=%01111111 0=%00000000
	ld a,(maxbits)
	inc a
	ld (maxbits),a
	sub e       ;maxbits-bitcount
	rrca
	rrca
	rrca
	and %00011111
	inc a
	ld b,a     ;max number of bytes to iterate over
	ld a,(de)
	cpl        ;we may have needed those bits reversed. 1's are what we keep with old
	ld c,a
	ld a,(hl)
	rrc (hl)
	push af   ;keep bit that was pushed out retained
		xor (hl)  ;mask in old state
		and c
		xor (hl)
		ld (hl),a
	pop af
-:	inc hl
	rr (hl)
	djnz {-}
	ret
    
.align 16     ;This needs an alignment due to how I handle indexing
idlePacket:   ;Preformed idle packet
.db 43
.db %11111111
.db %11111110
.db %11111111
.db %00000000
.db %01111111
.db %11000000
.echoln "MODULE DCC  SIZE : ",$-_modulestart
.endlocal
.endmodule