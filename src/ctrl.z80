.module ctrl
.local
_modulestart:
;
; This is the dashboard component to the application. This is what drives and
; maintains the appearance of the DCC controller
;

C_SWITCHSTATE  .equ 0
C_NOTMOMENTARY .equ 1

C_FLAGS    .equ 0
C_CALLBACK .equ 1

allocMem(2,temp)
allocMem(1,curbank)
allocMem(1,throttlemode)   ;0: 0-14, 1: 0-28, 2:0-128
allocMem(1,throttle)       ;unsigned.
allocMem(1,direction)      ;0=forward 1=backward -1:emergency stop triggered
allocMem(1,tabflags)       ;b0=bank1 b1=bank2 [...] b4=[MODE]
allocMem(2,curaddress)     ;0-32767 (signed 16 bit value, sign unused)
allocMem((27*1),bankdata)  ;.db state
allocMem(2,e_numpad)
allocMem(2,e_updown)
allocMem(2,e_leftright)
;allocMem(2,e_)

;------------------------------------------------------------------------------------
Initialize:
	xor a
	ld hl,DefaultControllerCallback
	ld (e_numpad),hl
	ld (e_updown),hl
	ld (e_leftright),hl
	ld (curbank),a
	ld (throttle),a
	ld (tabflags),a
	inc a
	ld (throttlemode),a
	ld b,27
	ld hl,bankdata
-:  ld (hl),0
	inc hl
	djnz {-}
	call _drawlabels
	call _drawkeysprites
	ld c,0
	jp _drawtabs
;-----------------------------------------------------------------------------------
Refresh:
	call UpdateAddress
	call UpdateThrottle
	call UpdateDirection
	call UpdateKeyLabels
	call UpdateSwitchState
	call UpdateSwitchLock
	call UpdateTabs
	ret
;------------------------------------------------------------------------------------
EventLoop:
	bcall(_kbdScan)
	bcall(_getCSC)
	ld hl,(curbank)
	cp skYequ   ;F1 - BANK 1
	jr nz,{+}
	ld a,0
_evloop_banks_common:
	cp L
	jr z,EventLoop
	ld (curbank),a
	call UpdateKeyLabels
	call UpdateSwitchState
	call UpdateSwitchLock
	call UpdateTabs
	jr EventLoop
+:	cp skWindow  ;F2 - BANK 2
	jr nz,{+}
	ld a,1
	jr _evloop_banks_common
+:	cp skZoom    ;F3 - BANK 3
	jr nz,{+}
	ld a,2
	jr _evloop_banks_common
+:	cp skGraph
	jr nz,{+}
	ld a,(tabflags)
	xor %00010000
	ld (tabflags),a
	call UpdateTabs
	jr EventLoop
+:	ld hl,_evloop_numpad_table
	ld bc,9
	cpir
	jr nz,{+}
	ld a,(tabflags)
	bit 4,a
	jr z,_evloop_togglefunction
;	res 4,a \ ld (tabflags),a
	ld a,(curbank)
	ld e,a
	ld h,(bankdata_size/3)+0
	call math.multEandH
	ld de,bankdata
	add hl,de
	add hl,bc
	ld a,(hl)
	xor 1 << C_NOTMOMENTARY
	ld (hl),a
	call UpdateSwitchLock
	jp EventLoop
_evloop_togglefunction:
	jp EventLoop
+:	cp skClear \ ret z  ;REMOVE WHEN DONE TO MAKE APP ENDLESS
	
	jp EventLoop
	



_evloop_waitkeyrelease:
	bcall(_kbdscan)
	ld a,(kbdScanCode)
	or a
	jr nz,_evloop_waitkeyrelease
	ret

_evloop_numpad_table:
.db sk9,sk8,sk7,sk6,sk5,sk4,sk3,sk2,sk1,$FF,$FF,$FF
	
	

;-----------------------------------------------------------------------------------



_drawlabels:
	ld a,IMGBANK
	out (5),a
	ld hl,48  \ ld a,4   \ ld bc,wh(address_w,address_h)   \ ld de,address_a
	call gfx.SpriteNoClip
	ld hl,232 \ ld a,4   \ ld bc,wh(throttle_w,throttle_h) \ ld de,throttle_a
	call gfx.SpriteNoClip
	
	ld de,uparrowoff_a
	call _drawarrowuploc
	ld de,downarrowoff_a
	call _drawarrowdownloc
	
	ld hl,4   \ ld a,17  \ ld bc,wh(144,52) \ ld d,XLC_BLACK
	call gfx.FillRect
	ld hl,228 \ ld a,17  \ ld bc,wh(88,52)  \ ld d,XLC_BLACK
	call gfx.FillRect
	ld b,5
	ld hl,8
	call {+}
	ld b,3
	ld hl,232
+:	
-:  push bc
		push hl
			xor a
			call _draw7seg
		pop hl
		ld bc,28
		add hl,bc
	pop bc
	djnz {-}
	ret
	
_drawkeysprites:
	ld a,IMGBANK
	out (5),a
	ld hl,93
	ld c,3
--:	ld b,3
	ld e,85
-:	call _drawkeyspriteface
	ld a,e
	add a,47
	ld e,a
	djnz {-}
	ld de,46
	add hl,de
	dec c
	jr nz,{--}
	ret
	
	
_drawkeyspriteface:
	push bc
		push de
			push hl
				ld a,e
				ld bc,wh(numpadbutton_w,numpadbutton_h)
				ld de,numpadbutton_a
				call gfx.SpriteNoClip
			pop hl
		pop de
		push de
			push hl
				ld bc,14
				add hl,bc
				ld a,-6
				add a,e
				ld bc,wh(13,4)
				ld d,XLC_LIGHTGRAY
				call gfx.FillRect
			pop hl
		pop de
	pop bc
	ret
	
_drawtabs:  ;C = bitfield for active tabs
	ld a,TABBANK
	out (5),a
	ld hl,3
	ld b,5
	ld de,tabs_a
-:	rrc c
	push bc
		push hl
			push de
				ld a,219
				jr nc,{+}
				ex de,hl
				ld bc,tabs_w*(tabs_h/10)
				add hl,bc
				ex de,hl
+:				ld bc,wh(tabs_w,(tabs_h/10))
				call gfx.SpriteNoClip
			pop hl
			ld de,((tabs_h/5)*tabs_w)+0
			add hl,de
			ex de,hl
		pop hl
		ld bc,63
		add hl,bc
	pop bc
	djnz {-}
	ret

;HL= Xpos, A=%X7654321
;  3     
;1   6     
;  4      
;2   7     
;  5      
_draw7seg:
	ld bc,wh(4,16)
	ld e,25
	call _drawseg
	ld bc,wh(4,16)
	ld e,45
	call _drawseg
	ld de,4
	add hl,de
	ld bc,wh(16,5)
	ld e,21
	call _drawseg
	ld bc,wh(16,5)
	ld e,41
	call _drawseg
	ld bc,wh(16,5)
	ld e,61
	call _drawseg
	ld de,16
	add hl,de
	ld bc,wh(4,16)
	ld e,25
	call _drawseg
	ld bc,wh(4,16)
	ld e,45
_drawseg:  ;HL=X, BC=WH, E=Y
	rrca
	ld d,XLC_DARKRED
	jr nc,{+}
	ld d,XLC_SEGRED
+:	push hl
		push af
			ld a,e
			call gfx.FillRect
		pop af
	pop hl
	ret

_draw7seg3num:  ;IX=Xstart HL=num
	res 0,(iy+asm_flag1)
	jr {+1@}
_draw7seg5num:  ;IX=Xstart HL=num
	res 0,(iy+asm_flag1)
	ld bc,-10000
	call {+}
	ld bc,-1000
	call {+}
@:	ld bc,-100
	call {+}
	ld bc,-10
	call {+}
	ld bc,-1
	set 0,(iy+asm_flag1)
+:	ld a,-1
-:	inc a
	add hl,bc
	jr c,{-}
	sbc hl,bc
	push hl
		or a
		jr nz,{+}
		bit 0,(iy+asm_flag1)
		jr nz,{++}  ;jump to render zero
		xor a
		jr {+++}    ;jump to direct display 7seg OFF
+:		set 0,(iy+asm_flag1)
++:		ld hl,_7segnumtable
		ld e,a
		ld d,0
		add hl,de
		ld a,(hl)
+++:	push ix
		pop hl
		call _draw7seg
		ld de,28
		add ix,de
	pop hl
	ret
	
_7segnumtable:
.db %01110111  ;0
.db %01100000  ;1
.db %00111110  ;2
.db %01111100  ;3
.db %01101001  ;4
.db %01011101  ;5
.db %01011111  ;6
.db %01100100  ;7
.db %01111111  ;8
.db %01111101  ;9
	
	
	
	
	
	
	
UpdateAddress:
	ld ix,8
	ld hl,(curaddress)
	jp _draw7seg5num
	
UpdateThrottle:
	ld ix,232
	ld hl,(throttle)
	ld h,0
	jp _draw7seg3num

UpdateDirection:
	ld a,IMGBANK
	out (5),a
	ld a,(direction)
	;0=fwd
	ld de,uparrowoff_a
	rrca
	jr c,{+}
	ld de,uparrowon_a
+:	push af
		call _drawarrowuploc
	pop af
	ld de,downarrowoff_a
	cp $80  ;was 1 now $80 due to rrca. If exactly this number, then turn on arrow
	jr nz,{+}
	ld de,downarrowon_a
+:	jr _drawarrowdownloc
;Note: down arrow size should be same as up arrow.
;      These routines assume IMGBANK has already been selected
_drawarrowdownloc: ;DE = arrow sprite address. 
	ld a,45
	jr {+}
_drawarrowuploc:   ;DE = arrow sprite address
	ld a,17  
+:	ld bc,wh(uparrowoff_w,uparrowoff_h)
	ld hl,200
	jp gfx.SpriteNoClip
	
UpdateKeyLabels:
	ld a,IMGBANK
	out (5),a
	ld a,(curbank)
	ld e,a
	ld h,fnums_w
	call math.multEandH
	ld e,L
	ld h,(fnums_h/(27/9))+0
	call math.multEandH
	ld de,fnums_a
	add hl,de
	push hl
	pop ix
	ld e,184
	ld c,3
--:	ld b,3
	ld hl,102
-:	call _drawkeylabels  ;internal: add hl,46
	djnz {-}
	ld a,e
	sub 47
	ld e,a
	dec c
	jr nz,{--}
	ret
_drawkeylabels:
	push bc
		push de
			push hl
				ld a,e
				ld bc,wh(fnums_w,(fnums_h/27))
				push ix
				pop de
				call gfx.SpriteNoClip
				ld de,fnums_w*(fnums_h/27)
				add ix,de
			pop hl
			ld de,46
			add hl,de
		pop de
	pop bc
	ret
	
UpdateSwitchState:
	call _getbankaddress
	ld e,173
	ld c,3
--:	ld b,3
	ld hl,107
-:	call _drawswitchleds  ;internal: add hl,46
	djnz {-}
	ld a,e
	sub 47
	ld e,a
	dec c
	jr nz,{--}
	ret
_drawswitchleds:
	push bc
		push de
			push hl
				ld a,e
				ld bc,wh(13,4)
				ld d,XLC_RED
				bit C_SWITCHSTATE,(ix+C_FLAGS)
				jr z,{+}
				ld d,XLC_GREEN
+:				call gfx.FillRect
				ld de,bankdata_size/27
				add ix,de
			pop hl
			ld de,46
			add hl,de
		pop de
	pop bc
	ret
	
UpdateSwitchLock:
	ld a,IMGBANK
	out (5),a
	call _getbankaddress
	ld e,198
	ld c,3
--:	ld b,3
	ld hl,109
-:	call _drawlockstatus  ;internal: add hl,46
	djnz {-}
	ld a,e
	sub 47
	ld e,a
	dec c
	jr nz,{--}
	ret
_drawlockstatus:
	push bc
		push de
			push hl
				ld a,e
				ld bc,wh(lock_w,lock_h)
				bit C_NOTMOMENTARY,(ix+C_FLAGS)
				jr nz,{+}
				ld d,XLC_WHITE
				call gfx.FillRect
				jr {++}
+:				ld de,lock_a
				call gfx.SpriteNoClip
++:				ld de,bankdata_size/27
				add ix,de
			pop hl
			ld de,46
			add hl,de
		pop de
	pop bc
	ret
	
_getbankaddress:
	ld a,(curbank)
	ld e,a
	ld h,(bankdata_size/(27/9))+0
	call math.multEandH
	ld de,bankdata
	add hl,de
	push hl
	pop ix
	ret
	
UpdateTabs:
	ld a,(curbank)
	inc a
	ld b,a
	ld a,$80
-	rlca
	djnz {-}
	ld b,a
	ld a,(tabflags)
	xor b
	and %11111000
	xor b
	ld (tabflags),a
	ld c,a
	jp _drawtabs
	
	
	
DefaultControllerCallback:
	ret



.echoln "MODULE CTRL SIZE : ",$-_modulestart
.endlocal
.endmodule