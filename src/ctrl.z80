.module ctrl
.local
_modulestart:

#define keypad_collect(x,y,rtn) call _kpad_subrcollect \.dw x,rtn \.db y

;
; This is the dashboard component to the application. This is what drives and
; maintains the appearance of the DCC controller
;

;Event documentation
;
;e_numpad - Called whenever a keypad push or release event occurs.
;           On entry: A  = Nonzero if pushed, 0 if released
;                     C  = function number (0-26)
;                     IX = current address of bank status bytes
;                          For each byte (FL-F26), state for each function:
;                             b0 : 1 if switch on, 0 if switch off
;                             b1 : 1 if switch lock enabled, 0 if momentary
;
;e_updown - Called when user pushes up or down to change train direction.
;			On entry: 	 A= DIR_FORWARD, DIR_BACKWARD
;						 E = current throttle value
;                        D = throttle mode (0:[0-14],1:[0-28],2:[0-128])
;
;e_leftright - Called when user pushes left or right to change throttle.
;			   On entry: E = current throttle value
;                        D = throttle mode (0:[0-14],1:[0-28],2:[0-128])
;
;e_cfgack - Called when the user hits the "OK" button on the config screen.
;           On entry:  DE = address
;                      B  = 0 if DC mode disabled, 1 if DC mode enabled
;					   C  = 0 if short address, 1 if long address
;
;e_estop - Called when the emergency stop button has been pushed.
;          On entry:   None
;
;
;
;


C_SWITCHSTATE  .equ 0
C_NOTMOMENTARY .equ 1

C_FLAGS    .equ 0
C_CALLBACK .equ 1

DIR_FORWARD .equ 0
DIR_REVERSE .equ 1
DIR_ESTOP   .equ -1


;------------------------------------------------------------------------------------
Initialize:
	ld hl,temp
	ld de,temp+1
	ld bc,(e_numpad-temp)-1
	ld (hl),$00
	ldir                  ;clears off all interface data
;	ld hl,bankdata
;	ld de,bankdata+1
;	ld bc,bankdata_size-1
;	ld (hl),1<<C_NOTMOMENTARY
;	ldir                  ;this is actually done when users leaves config
	ld hl,e_numpad
	ld de,DefaultControllerCallback
	ld b,(e_nullevent-e_numpad)/2
-:	ld (hl),e
	inc hl
	ld (hl),d
	inc hl
	djnz {-}
	ld hl,(256*XLC_DARKRED)+XLC_SEGRED
	ld (segcolors),hl
	call _lbl_address_backers
	jp _lbl_init_config

;-----------------------------------------------------------------------------------
Refresh:
	ld a,(menumode)
	dec a
	jr z,{+}
	;fill in other for refresh config screen
	jp UpdateTabs2
+:	call UpdateAddress
	call UpdateThrottle
	call UpdateDirection
	call UpdateKeyLabels
	call UpdateSwitchState
	call UpdateSwitchLock
	call UpdateTabs
	;--- draw "REV FWD" sign above arrows
	ld a,IMGBANK
	out (5),a
	ld hl,157
	ld a,23
	ld bc,wh(revfwd_w,revfwd_h)
	ld de,revfwd_a
	call gfx.Sprite2BitNoclip
	ret
;------------------------------------------------------------------------------------
EventLoop:
	call kbd.gsGetCSC
	ld de,(menumode)
	;-- Yequ,Window,Zoom (F1,F2,F3) keys
	ld bc,3
	ld hl,_evl_tabtable
	cpir
	jp z,_evl_fnbanks
	;-- Graph (F5) key
	cp skGraph
	jp z,_evl_graphkey
	;-- Trace (F4) key
	cp skTrace
	jp z,_evl_tracekey
	;-- Numkeys (9,8,7,6,5,4,3,2,1[,0])
	ld d,e
	rrc d ;carry if controller, nc if config
	ld bc,9
	jr c,{+}
	inc bc ;need full range keypad if in config
+:	ld hl,_evl_nptable
	cpir
	jp z,_evl_numpad
	;-- Right key [config: -- control: Move train forward]
	cp skRight
	jp z,_evl_rightkey
	;-- Left key [config: -- control: Move train in reverse]
	cp skLeft
	jp z,_evl_leftkey
	;-- Down key [config: -- control: Decelerate train]
	ld b,50  ;SHARED FOR L/R. DO NOT REMOVE
	cp skDown
	jp z,_evl_downkey
	;-- Up key [config: -- control: Accelerate train]
	cp skUp
	jp z,_evl_upkey
	;-- Enter key [config: -- control: eStop command]
	cp skEnter
	jp z,_evl_enterkey
	;- Delete key [config: delete address digit, control: -- ]
	cp skDel
	jp z,_evl_delkey
	;-- Clear key [config: clears address, control: --]
	cp skClear
	jp z,_evl_clearkey
	;-- Sin key [cycle colors of 7-segment display]
	cp skSin
	jp z,_evl_sinkey
	;-- Other keys go between here and jp EventLoop
	
	
	
	
	;-- Math key [exit event loop]
	cp skMath
	ret z
	;-- Handling constantly-running service routines 
	ld a,(menumode)
	dec a
	jr z,{+}
	call UpdateAddress  ;to keep the cursor running in config mode
+:	jp EventLoop
	
_evloop_keywait_and_jumpback:
	call kbd.keyWait
	jp EventLoop

#include "src/ctrl_evt.z80"

;-----------------------------------------------------------------------------------
	
_drawtabs:  ;C = bitfield for active tabs
	ld a,TABBANK
	out (5),a
	ld hl,3
	ld b,5
	ld de,tabs_a
-:	rrc c
	push bc
		push hl
			push de
				ld a,219
				jr nc,{+}
				ex de,hl
				ld bc,tabs_w*(tabs_h/10)
				add hl,bc
				ex de,hl
+:				ld bc,wh(tabs_w,(tabs_h/10))
				call gfx.SpriteNoClip
			pop hl
			ld de,((tabs_h/5)*tabs_w)+0
			add hl,de
			ex de,hl
		pop hl
		ld bc,63
		add hl,bc
	pop bc
	djnz {-}
	ret

UpdateAddress:
	ld ix,8
	ld hl,(curaddress)
	ld a,(menumode)
	dec a
	jp z,_draw7seg5num
	res 0,(iy+asm_flag1)
	ld a,(dispDigits)
	ld c,a
	ld b,5
	ld de,_upadr_numtable
-:	push bc
		ld a,b
		cp c
		jr nz,{+}
		set 0,(iy+asm_flag1)
+:		cp 1
		jr nz,{++}
		ld a,(cursorcycle)
		inc a
		ld (cursorcycle),a
		and %00100000
		jr z,{++}
		push hl
			push ix
			pop hl
			ld a,%00010000
			call _draw7seg
		pop hl
		jr {+++}
++:		ex de,hl
		ld c,(hl)
		inc hl
		ld b,(hl)
		inc hl
		ex de,hl
		push de
			call _draw7segDigit
		pop de
+++	pop bc
	djnz {-}
_upadr_numtable:
.dw -10000  ;consists of ret c \ ret p, the latter always takes due to how the loop exits
.dw -1000
.dw -100
.dw -10
.dw -1
	
	
UpdateThrottle:
	ld ix,232
	ld hl,(throttle)
	ld h,0
	ld a,(direction)
	add a,a
	jp nc, _draw7seg3num
	push ix
	pop hl
	xor a
	call _draw7seg
	ld de,8
	add hl,de
	ld a,%00011111
	call _draw7seg
	ld de,8
	add hl,de
	xor a
	jp _draw7seg

UpdateDirection:
	ld a,IMGBANK
	out (5),a
	ld a,(direction)
	;0=fwd
	ld de,uparrowoff_a
	rrca
	jr c,{+}
	ld de,uparrowon_a
+:	push af
		call _drawarrowuploc
	pop af
	ld de,downarrowoff_a
	cp $80  ;was 1 now $80 due to rrca. If exactly this number, then turn on arrow
	jr nz,{+}
	ld de,downarrowon_a
+:	jr _drawarrowdownloc
;Note: down arrow size should be same as up arrow.
;      These routines assume IMGBANK has already been selected
_drawarrowdownloc: ;DE = arrow sprite address. 
	ld hl,158
	jr {+}
_drawarrowuploc:   ;DE = arrow sprite address
	ld a,17  
	ld hl,194
+:	ld bc,wh(uparrowoff_w,uparrowoff_h)
	ld a,38
	jp gfx.SpriteNoClip
	
UpdateKeyLabels:
	ld a,(curbank)
	ld e,a
	ld h,fnums_w
	call math.multEandH
	ld e,L
	ld h,(fnums_h/(27/9))+0
	call math.multEandH
	ld de,fnums_a
	add hl,de
	push hl
	pop ix
	keypad_collect(102,184,_drawkeylabels)

_drawkeylabels:
	ld a,e
	ld bc,wh(fnums_w,(fnums_h/27))
	push ix
	pop de
	call gfx.SpriteNoClip
	ld de,fnums_w*(fnums_h/27)
	add ix,de
	ret
	
UpdateSwitchState:
	call _getbankaddress
	keypad_collect(108,173,_drawswitchleds)
_drawswitchleds:
	ld a,e
	ld bc,wh(12,4)
	ld d,XLC_RED
	bit C_SWITCHSTATE,(ix+C_FLAGS)
	jr z,{+}
	ld d,XLC_GREEN
+:	call gfx.FillRect
	ld de,bankdata_size/27
	add ix,de
	ret
	
UpdateSwitchLock:
	call _getbankaddress
	keypad_collect(110,198,_drawlockstatus)
_drawlockstatus:
	ld a,e
	ld bc,wh(lock_w,lock_h)
	bit C_NOTMOMENTARY,(ix+C_FLAGS)
	jr nz,{+}
	ld d,XLC_WHITE
	call gfx.FillRect
	jr {++}
+:	ld de,lock_a
	call gfx.SpriteNoClip
++:	ld de,bankdata_size/27
	add ix,de
	ret
	
_getbankaddress:
	ld a,(curbank)
	ld e,a
	ld h,(bankdata_size/(27/9))+0
	call math.multEandH
	ld de,bankdata
	add hl,de
	push hl
	pop ix
	ret
_getcurfuncbank:
	ld a,(curbank)
	ld e,a
	ld h,9
	jp math.multEandH
	
	
UpdateTabs2:
	ld a,(enableDCmode)
	rrca
	ld a,(tabflags)
	res 3,a
	jr nc,{+}
	set 3,a
+:	ld (tabflags),a
	ld a,(throttlemode)
	jr {+}
UpdateTabs:
	ld a,(curbank)
+:	inc a
	ld b,a
	ld a,$80
-:	rlca
	djnz {-}
	ld b,a
	ld a,(tabflags)
	xor b
	and %11111000
	xor b
	ld (tabflags),a
	ld c,a
	jp _drawtabs
	
DefaultControllerCallback:
	ret
	
	
	
	
	
	
	
;-------------------------------------------------------------------------
	
_kpad_subrcollect:
	ld a,IMGBANK
	out (5),a
	pop hl
	ld de,xtemp
	ld bc,5
	ldir
	ld a,(ytemp)
	ld e,a
	ld c,3
--:	ld b,3
	ld hl,(xtemp)
-:	push bc
		push de
			push hl
				push hl
					ld hl,{+}
					ex (sp),hl
					push hl
						ld hl,(atemp)
						ex (sp),hl
					ret
+:			pop hl
			ld de,46
			add hl,de
		pop de
	pop bc
	djnz {-}
	ld a,e
	sub 47
	ld e,a
	dec c
	jr nz,{--}
	ret
	
	
;=============================================================================
; Backing initializations

_lbl_init_config:
	call _lbl_coverup_everything_else
	ld a,TABBANK
	ld hl,imgbank3_c
	call dpk.depackToBank
	ld a,HELPBANK
	out (5),a
	ld hl,169
	ld a,7
	ld bc,wh(help1_w,help1_h)
	ld de,help1_a
	call gfx.Sprite2BitNoclip
	ld hl,165
	ld a,102
	ld bc,wh(help2_w,help2_h)
	ld de,help2_a
	call gfx.Sprite2BitNoclip
	ld hl,15
	ld a,104
	ld bc,wh(help3_w,help3_h)
	ld de,help3_a
	call gfx.Sprite2BitNoclip
	ld hl,32
	ld a,197
	ld bc,wh(help4_w,help4_h)
	ld de,help4_a
	call gfx.Sprite2BitNoclip
	;Initialize/reset address data input
	xor a
	ld h,a
	ld L,a
	ld (curaddress),hl
	ld (dispDigits),a
	;add other active controls in setup which needs to be initialized
	jp Refresh
	
_lbl_init_controller:
	call _lbl_coverup_everything_else
	call _lbl_keysprites
	ld a,TABBANK
	ld hl,imgbank2_c
	call dpk.depackToBank
	call _lbl_throttle_backers
	jp Refresh
	
_lbl_coverup_everything_else:
	;covers up throttle (top whole section)
	ld hl,155
	ld a,0
	ld bc,wh(165,69)
	ld d,XLC_DARKGRAY
	call gfx.FillRect
	;covers up left half because apparently width is too small.
	ld hl,0
	ld a,69
	ld bc,wh(160,150)
	ld d,XLC_DARKGRAY
	call gfx.FillRect
	;finish up by covering right half
	ld hl,160
	ld a,69
	ld bc,wh(160,150)
	ld d,XLC_DARKGRAY
	jp gfx.FillRect

_lbl_arrow_backers:
	ld de,uparrowoff_a
	call _drawarrowuploc
	ld de,downarrowoff_a
	jp _drawarrowdownloc

_lbl_throttle_backers:
	ld a,IMGBANK
	out (5),a
	ld hl,232 
	ld a,4  
	ld bc,wh(throttle_w,throttle_h) 
	ld de,throttle_a
	call gfx.Sprite2BitNoclip
	ld hl,228
	ld a,17
	ld bc,wh(88,52)
	ld d,XLC_BLACK
	call gfx.FillRect
 	ld b,3
	ld hl,232
	jr _lbl_backer_segments

_lbl_address_backers:
	ld a,IMGBANK
	out (5),a
	ld hl,48
	ld a,4
	ld bc,wh(address_w,address_h)
	ld de,address_a
	call gfx.Sprite2BitNoclip
	ld hl,4
	ld a,17
	ld bc,wh(144,52)
	ld d,XLC_BLACK
	call gfx.FillRect
	ld b,5
	ld hl,8
_lbl_backer_segments:
	push bc
		push hl
			xor a
			call _draw7seg
		pop hl
		ld bc,28
		add hl,bc
	pop bc
	djnz _lbl_backer_segments
	ret

_lbl_keysprites:
	keypad_collect(94,179,_drawkeysprite)
	
_drawkeysprite:
	ld a,e
	ld bc,wh(numpadbutton_w,numpadbutton_h)
	ld de,numpadbutton_a
	call gfx.Sprite2BitNoClip
	ret

;=============================================================================
; 7-Segment Stuffs 

;HL= Xpos, A=%X7654321
;  3     
;1   6     
;  4      
;2   7     
;  5      
_draw7seg:
	ld bc,wh(4,16)
	ld e,25
	call _drawseg
	ld bc,wh(4,16)
	ld e,45
	call _drawseg
	ld de,4
	add hl,de
	ld bc,wh(16,5)
	ld e,21
	call _drawseg
	ld bc,wh(16,5)
	ld e,41
	call _drawseg
	ld bc,wh(16,5)
	ld e,61
	call _drawseg
	ld de,16
	add hl,de
	ld bc,wh(4,16)
	ld e,25
	call _drawseg
	ld bc,wh(4,16)
	ld e,45
_drawseg:  ;HL=X, BC=WH, E=Y
	push hl
		rrca
		push af
			ld a,e
			ld de,(segcolors)
			jr nc,{+}
			ld d,e
+:			call gfx.FillRect
		pop af
	pop hl
	ret

_draw7seg3num:  ;IX=Xstart HL=num
	res 0,(iy+asm_flag1)
	jr {+1@}
_draw7seg5num:  ;IX=Xstart HL=num
	res 0,(iy+asm_flag1)
	ld bc,-10000
	call {+}
	ld bc,-1000
	call {+}
@:	ld bc,-100
	call {+}
	ld bc,-10
	call {+}
	ld bc,-1
	set 0,(iy+asm_flag1)
_draw7segDigit:
+:	ld a,-1
-:	inc a
	add hl,bc
	jr c,{-}
	sbc hl,bc
	push hl
		or a
		jr nz,{+}
		bit 0,(iy+asm_flag1)
		jr nz,{++}  ;jump to render zero
		xor a
		jr {+++}    ;jump to direct display 7seg OFF
+:		set 0,(iy+asm_flag1)
++:		ld hl,_7segnumtable
		ld e,a
		ld d,0
		add hl,de
		ld a,(hl)
+++:	push ix
		pop hl
		call _draw7seg
		ld de,28
		add ix,de
	pop hl
	ret
	
_7segnumtable:
.db %01110111  ;0
.db %01100000  ;1
.db %00111110  ;2
.db %01111100  ;3
.db %01101001  ;4
.db %01011101  ;5
.db %01011111  ;6
.db %01100100  ;7
.db %01111111  ;8
.db %01111101  ;9
	
;=============================================================================





.echoln "MODULE ctrl SIZE : ",$-_modulestart
.endlocal
.endmodule