;---
_evl_fnbanks:
	jp nz,_evloop_keywait_and_jumpback
	ld a,c
	dec e
	jr nz,_evl_fnbanks_doconfig
_evl_fnbanks_docontroller:
	ld (curbank),a
	ld a,(enableDCmode)
	or a
	jp nz,_evloop_keywait_and_jumpback
	call UpdateKeyLabels
	call UpdateSwitchState
	call UpdateSwitchLock
	call UpdateTabs
	jp _evloop_keywait_and_jumpback
_evl_fnbanks_doconfig:
	ld (throttlemode),a
	call UpdateTabs2
	jp _evloop_keywait_and_jumpback
;---
_evl_graphkey:
	dec e
	jr nz,_evl_graphkey_doconfig
_evl_graphkey_docontroller:
	ld a,(enableDCmode)
	or a
	jp nz,_evloop_keywait_and_jumpback
	ld a,(tabflags)
	xor %00010000
	ld (tabflags),a
	call UpdateTabs
	jp _evloop_keywait_and_jumpback
_evl_graphkey_doconfig:
	xor a
	ld (throttle),a
	ld (tabflags),a
	ld hl,bankdata
	ld de,bankdata+1
	ld bc,bankdata_size-1
	ld (hl),1<<C_NOTMOMENTARY
	ldir
	ld a,1
	ld (menumode),a
	ld a,DIR_ESTOP
	ld (direction),a
	call _lbl_init_controller
	ld hl,(curaddress)
	push hl
		ld de,128
		or a
		ld c,1
		sbc hl,de  ;if no carry, then is long.
		jr nc,{+}
		ld a,(dispDigits)
		cp 4  ;if no carry, then is long
		jr nc,{+}
		dec c ;else is short.
+:		ld a,(enableDCmode)
		ld b,a
	pop de
	ld hl,_evloop_keywait_and_jumpback \ push hl \ ld hl,(e_cfgack) \ jp (hl)
;---
_evl_tracekey:
	dec e
	jr nz,_evl_tracekey_doconfig
_evl_tracekey_docontroller:
	xor a
	ld (menumode),a
	ld (tabflags),a
	call _lbl_init_config
	jp _evloop_keywait_and_jumpback
_evl_tracekey_doconfig:
	ld a,(enableDCmode)
	xor 1
	ld (enableDCmode),a
	ld hl,{+}
	push hl
	ld hl,(e_dcmode)
	jp (hl)
+:	call UpdateTabs2
	jp _evloop_keywait_and_jumpback
;---
_evl_numpad:
	ld hl,enableDCmode
	inc (hl)
	dec (hl)  ;NZ if enabled. If it's enabled, quit now (do not process numkeys)
	jp nz,_evloop_keywait_and_jumpback
	dec e
	jr nz,_evl_numpad_doconfig
_evl_numpad_docontroller:
	ld (keytemp),a
	call _getbankaddress
	ld a,bankdata_size/27
-:	add ix,bc
	add hl,bc
	dec a
	jr nz,{-}
	ld a,(tabflags)
	bit 4,a
	jr z,_evlnpdctrl_togfn
;	res 4,a \ ld (tabflags),a
	ld a,(hl)
	xor 1 << C_NOTMOMENTARY
	res C_SWITCHSTATE,a
	ld (hl),a
	call UpdateSwitchLock
	jp _evloop_keywait_and_jumpback
_evlnpdctrl_togfn:
	call _evl_np_togswitch
	call _getcurfuncbank
	add hl,bc
	ld c,L
	ld a,(ix+C_FLAGS)
	and 1 << C_SWITCHSTATE
	push bc
		push ix
			call _evl_call_npevent
			call UpdateSwitchState
		pop ix
	pop bc
	bit C_NOTMOMENTARY,(ix+C_FLAGS)
	jp nz,_evloop_keywait_and_jumpback
	push bc
		ld a,(keytemp)
		ld c,a
-:		call kbd.gsGetCSC  ;wait until exact key that was pressed is no longer
		or a
		jr z,{+}
		cp c
		jr z,{-}
+:		call _evl_np_togswitch
	pop bc
	call _evl_call_npevent
	call UpdateSwitchState
	jp EventLoop
_evl_numpad_doconfig:
	ld de,(curaddress)
	ld a,10
	call math.multDEandA
	or a
	jr nz,{+}
	ld a,h
	and %11000000  ;disallow addresses higher than 14 bits
	jr nz,{+}
	add hl,bc
	ld a,h
	cp 62+1  ;if nc, then over limit. Address hard limit is 16127
	jp nc,{+}
	ld a,(dispDigits)
	inc a
	cp 5+1
	jr z,{+}
	ld (curaddress),hl
	ld (dispDigits),a
+:	jp _evloop_keywait_and_jumpback
;---
_evl_rightkey:
	dec e
	jr nz,_evl_rightkey_doconfig
_evl_rightkey_docontroller:
	ld a,DIR_FORWARD
_evl_rightkey_docontroller_collect:
	ld (direction),a
	push af
		call UpdateDirection
		call UpdateThrottle
		ld a,(throttle)
		ld e,a
		ld a,(throttlemode)
		ld d,a
	pop af
	ld hl,_evloop_keywait_and_jumpback \ push hl \ ld hl,(e_leftright) \ jp (hl)
_evl_rightkey_doconfig:
	jp _evloop_keywait_and_jumpback
;---
_evl_leftkey:
	dec e
	jr nz,_evl_leftkey_doconfig
_evl_leftkey_docontroller:
	ld a,DIR_REVERSE
	jr _evl_rightkey_docontroller_collect
_evl_leftkey_doconfig:
	jp _evloop_keywait_and_jumpback
;---
_evl_downkey:
	dec e
	jr nz,_evl_downkey_doconfig
_evl_downkey_docontroller:
	ld a,(direction)
	add a,a
	jp c,_evloop_keywait_and_jumpback
	ld a,(throttle)
	dec a
	jp m,_evloop_keywait_and_jumpback
	ld (throttle),a
	ld c,skDown
	call _evl_hold_throttle
	jr z,_evl_downkey_docontroller
	jp _evloop_keywait_and_jumpback
_evl_downkey_doconfig:
	jp _evloop_keywait_and_jumpback
;---
_evl_upkey:
	dec e
	jr nz,_evl_upkey_doconfig
_evl_upkey_docontroller:
	ld a,(direction)
	add a,a
	jp c,_evloop_keywait_and_jumpback
	ld hl,_evl_throttlemaxtable
	ld de,(throttlemode)
	ld d,0
	add hl,de
	ld a,(throttle)
	inc a
	cp (hl)
	jp nc,_evloop_keywait_and_jumpback
	ld (throttle),a
	ld c,skUp
	call _evl_hold_throttle
	jr z,_evl_upkey_docontroller
	jp _evloop_keywait_and_jumpback
_evl_upkey_doconfig:
	jp _evloop_keywait_and_jumpback
;---
;This event can occur regardless of mode.
;It's called "Emergency Stop" for a reason.
_evl_enterkey:
	ld a,(direction)
	ld a,DIR_ESTOP
	ld (direction),a
	xor a
	ld (throttle),a
	dec e
	jr nz,_evl_enterkey_doconfig
_evl_enterkey_docontroller:  ;if we're in not in config, update display
	call UpdateDirection
	call UpdateThrottle
_evl_enterkey_doconfig:
	ld hl,_evloop_keywait_and_jumpback \ push hl \ ld hl,(e_estop) \ jp (hl)
	
;---
_evl_delkey:
	dec e
	jr nz,_evl_delkey_doconfig
_evl_delkey_docontroller:
	jp _evloop_keywait_and_jumpback
_evl_delkey_doconfig:
	ld a,(dispDigits)
	sub 1
	adc a,0  ;limits decrement to zero
	ld (dispDigits),a
	ld hl,(curaddress)
	ld c,10
	call math.divHLandC
	ld (curaddress),hl
	jp _evloop_keywait_and_jumpback
;---
_evl_clearkey:
	dec e
	jr nz,_evl_clearkey_doconfig
_evl_clearkey_docontroller:
	jp _evloop_keywait_and_jumpback
_evl_clearkey_doconfig:
	xor a
	ld L,a
	ld H,a
	ld (curaddress),hl
	ld (dispDigits),a
	jp _evloop_keywait_and_jumpback
;---
_evl_sinkey:
	ld a,(curcolor)
	inc a
	and %00000011
	ld (curcolor),a
	add a,a
	ld hl,_evl_sinkey_table
	add a,L
	ld L,a
	jr nc,$+3
	inc h
	ld a,(hl)
	inc hl
	ld h,(hl)
	ld L,a
	ld (segcolors),hl
	call UpdateAddress
	ld a,(menumode)
	dec a
	call z,UpdateThrottle
	jp _evloop_keywait_and_jumpback
	
_evl_sinkey_table:
.db XLC_SEGRED,XLC_DARKRED
.db XLC_SEGBLUE,XLC_DARKBLUE
.db XLC_SEGGREEN,XLC_DARKGREEN
.db XLC_SEGAMBER,XLC_DARKYELLOW
	
	

;----------------------------------------------------------------------------
_evl_tabtable:
.db skZoom,skWindow,skYequ,$FF

_evl_nptable:
.db sk9,sk8,sk7,sk6,sk5,sk4,sk3,sk2,sk1,sk0,$FF

_evl_throttlemaxtable:
.db 14,28,127

_evl_call_npevent:
	ld hl,(e_numpad)
	jp (hl)
	
_evl_np_togswitch:
	ld a,(ix+C_FLAGS)
	xor 1 << C_SWITCHSTATE
	ld (ix+C_FLAGS),a
	ret

_evl_hold_throttle:
	push bc
		call UpdateThrottle
	pop bc
	djnz _evl_hold_throttle
	ld a,(throttle)
	ld e,a
	ld a,(throttlemode)
	ld d,a
	push bc
		ld hl,{+}
		push hl
		ld hl,(e_updown)
		jp (hl)
+:	pop bc
	call kbd.gsGetCSC
	cp c
	ld b,10
	ret
	

