.module DCC
.local
_modulestart:

IvtLocation	.equ	080h ; vector table at 8000h
IsrLocation	.equ	85h ; ISR at TextShadPtrs

periodA .equ 1 
periodB .equ 1 << 1

;.varloc appData,256 ; Used by IVT
.varloc usermem,244  ;A60B-A6FF
BitMask_LookupTables .equ $A700

.struct dccStateStruct      ;Digital Command Station State Vars
    .var 2, msgPTR    ;pointer to current message being processed
    .var 1, size     ;current bit "count" 
    .var 1, curDat    ;Current shifted data byte
    .var 1, flags     ;bit mask
                      ; b0 = Output Link Mirror Bit
                      ; b1 = Line Power control      -- needs to be implemented!
                      ; b2 = Period A/B
                      ; b3 = Forward/Reverse
                      ; b4 = Address Size
    .var 1, waitCTR   ;Set to 255 for pausing between packets ~15ms   
    .var 1, repeat    ; 0-254 times, 255 until changed
    .var 2,address
.endstruct 

OutputMirror = 0
LinePowerControl = 1
PeriodAB = 2
Direction = 3
AddressSize = 4
OutputMirrorMask = 1 << 0   
LinePowerControlMask = 1 << 1 
PeriodABMask = 1 << 2 
DirectionMask = 1 << 3 
AddressSizeMask = 1 << 4 
ZEROHOLD = 1
WAITCOUNT = 6 
;Default initializations for queueing message
; <ptr>
; 0 
; Preferabbly 0xFF
; 0
; 0 

.struct dccPacketStruct   ;https://www.nmra.org/sites/default/files/s-9.2.1_2012_07.pdf
    .var 1, size      ;number of data bits in this packet-1
    .var 1, data1     ;packet bytes
    .var 1, data2     ;
    .var 1, data3     ;
    .var 1, data4     ;
    .var 1, data5     ;
    .var 1, data6     ; error == address ^ data
    .var 1, data7     ; error == address ^ data
    .var 1, data8     ; error == address ^ data
    .var 1, data9     ; error == address ^ data
.endstruct

.var dccStateStruct, dccstate
.var dccPacketStruct, dccIdlePacket
.var dccPacketStruct, dccUserPacket
.endlocal

.var 10,packetGenScratch
.var 1,maxbits
.var 1,func


init:
SetUpInterrupt:
    di
    xor a
    out (pIntMask), a
    out (pCrstlTmr1Freq), a
    out (pCrstlTmr2Freq), a
    out (pCrstlTmr3Freq), a
    out (pLnkAstSeEnable), a
    ; And kill USB ~Copied from KermM
    out (57h), a
    out (5Bh), a
    out (4Ch), a
    ld  a, 2
    out (54h), a
    
    ; Custom Interrupts
    ld  hl, IvtLocation*256
    ld  de, IvtLocation*256+1
    ld  bc, 256
    ld  a, IvtLocation
    ld  i, a
    ld  a, IsrLocation
    ld  (hl), a
    ldir
 
    ld  hl, InterruptServiceRoutineEnter
    ld  de, IsrLocation*256+IsrLocation
    ld  bc, 3
    ldir
    
    ld a,82h                ; Set to CPU_FREQ/4 to Port $30
    out (pCrstlTmr1Freq),a
    ld a,%00000011          ; Set timer interrupt + loop to Port $31
    out (pCrstlTmr1Cfg),a
    ld a,218                ; Set loop period for ~58us at 15MHz to Port $32
    out (pCrstlTmr1Count),a
    im 2
    
    ld de,BitMask_LookupTables
    call generateLUT             ;set up lut for interrupts
    
    ex af,af'
    xor a
    ex af,af'               ;Zero wait
    xor a
    ld (dccState.flags),a
    ld (dccState.size),a
    ld (dccState.waitCTR),a
    ld hl,idlePacket
    ld (dccState.msgPTR),hl
    ld a,255
    ld (dccState.repeat),a
    ld (dccState.curDat),a
    ei
    ret
    
InterruptServiceRoutineEnter:
    jp InterruptServiceRoutine
InterruptServiceRoutine:
    ex af,af'               ;'
        exx
            ld bc,(%00000011 << 8)+pCrstlTmr1Cfg ;
            out (c),b                ;17cc Faster then PushPop
            
            or a                     ;If != Zero.
            jp nz,doWait
            
            ld a,(dccState.flags)
            out (0),a                ;Output bits to port 
            bit PeriodAB,a                  ;Check period
            ld a,(dccState.curDat)   ;Load A with current data being processed
            jp nz,doPeriodB          ;If Z We are period A   
doPeriodA:
            or a                     ;Check current data Bit
            jp nz,_notZeroBit1       ;If Z set wait
            ld a,ZEROHOLD  
            ld (dccState.waitCTR),a  ;Load Wait
_notZeroBit1:  

            ld a,(dccState.flags)    ;Need to make flags look like
                                     ; %XXXXX1X0
            and %11111110
            or  %00000100
            ld (dccState.flags),a    ;to %00000010
            
            jp doIntEnd
doPeriodB:
            or a                     ;Check current data bit
            jp nz,_notZeroBit2       ;If Z set Wait
            ld a,ZEROHOLD                   ;
            ld (dccState.waitCTR),a  ;Load Wait
_notZeroBit2:  
            ld a,(dccState.flags)    ; %XXXXX0X1
            and %11111011
            or  %00000001
            ld (dccState.flags),a    ;to %00000001
stateBEnd:

            ld hl,(dccState.msgPTR)
            inc hl
            ld a,(dccState.size)
            ld e,a
            ld d,BitMask_LookupTables>>8
            ld a,(de) \	inc d        ;First LUT is for(i=0;i<256;i++) arr1[i] = (i>>3)&7;
            add a,L
            ld L,a
            jr nc,$+3
            inc h
            ld a,(de)                ;Second LUT is for(i=0;i<256;i++) arr2[i] = 1<<(i&7);
            and (hl)
           
            ld (dccState.curDat),a
            
            ld hl,(dccState.msgPTR)  
            ld a,(dccState.size)
            cp (hl)                     ;sub max from current
            ;if zero
            jp z,checkRepeat            ;If 0 we have sent the packet
            inc a
            ld (dccState.size),a        ;Store the size back for next call
doIntEnd:   
            ld a,(dccState.waitCTR)     ;waitCTR is set in loop or at last wait count
        exx
    ex af,af' ;'
    ei
    ret
    
checkRepeat:                            ;If repeat !=0 repeat packet send
            ld a,(dccState.repeat)
            cp 255
            jp z,repeatEntry            ;If repeat is 255 requeue
            or a                        
            jp loadIdleAfterRepeat      ;If repeat is zero load idle packet
            dec a
            ld (dccState.repeat),a      ;Else Dec and store repeat
repeatEntry:
            ld a,(dccState.flags)
            and %11111010
            ld (dccState.flags),a
            xor a
            ld (dccState.size),a        ;reset packet
            ld a,255
            ld (dccState.waitCTR),a     ;Needs code to handle DC mode
            jp doWait                   ;no need to rest curdat is already 1
            
            
loadIdleAfterRepeat:
            ld a,(dccState.flags)
            and %11111010
            ld (dccState.flags),a
            xor a
            ld (dccState.size),a
            ld (dccState.waitCTR),a
            ld hl,idlePacket
            ld (dccState.msgPTR),hl
            ld a,255
            ld (dccState.repeat),a
            ld (dccState.curDat),a
doWait:
            dec a
            ld (dccState.waitCTR),a ;Save wait
        exx
    ex af,af' ;'
    ei
    ret
    
;Takes CFG information and sets up the interrupt
handleCFG:
    di
    ld (dccState.address),de
    ld hl,dccState.flags
    dec b
    jp nz,_endDCMode
_dcModeSetupStart:
;Nothing here yet
_endDCMode:
    dec c
    jp z,_handleLongAddress
    res 4,(hl)
    jp _endHandleCFG
_handleLongAddress
    set 4,(hl)
_endHandleCFG:
    ex af,af' ;'
    xor a
    ex af,af' ;'
    ei
    ret
    
handleEStop:
    di
    ex af,af' ;'
    xor a
    ex af,af' ;'
    ld a,(dccState.flags)
    and %11111000
    ld (dccState.flags),a    ;Zero wait
    xor a
    ld (dccState.flags),a
    ld (dccState.size),a
    ld hl,estopPacket
    ld (dccState.msgPTR),hl
    ld a,255
    ld (dccState.repeat),a
    ld (dccState.curDat),a
    ld a,WAITCOUNT
    ld (dccState.waitCTR),a
    ei
    ret
    
;Handles setting direction bit. Do we want to play with the throttle here?
handleReverser:
    ld hl,dccState.Flags
    cp ctrl.DIR_FORWARD
    jp z,_dirForward
_dirReverse:
    set Direction,(hl)
    jp handleThrottle
_dirForward:
    res Direction,(hl)
    jp handleThrottle
    
    
handleThrottle:
    ld hl,dccState.Flags
    ld a,d
    cp 2
    jp z,_128Speed
    or a
    jp nz,_28Speed
_14Speed:
    ld a,%01000000
    bit Direction,(hl)
    jp nz,_setReverse14
_setForward14:
    set 5,a          ;%01D00000
_setReverse14:
    dec e            ;Set to -1-13
    jp m,_setStop
    inc e \ inc e
    or e             ;%01DXSSSS 
_setStop:
    ld b,e
    ld c,0
_JPBasedOffAddressSize:
    bit AddressSize,(hl) ;z for short address
    jp nz,_LongAddress
_ShortAddress
    ld a,(dccState.address)
    jp dccSendShort3db
_LongAddress:
    ld hl,(dccState.address)
    jp dccSendLong3db
    
    
    
_28Speed:  ;speed in E
    ld a,4
    add a,e ;Set past Stop
    rr a    ;Rotate Off LSB
    jp nc,_28noset
    set 4,a  ;Move lsb to bit 5
_28noset:
    bit Direction,(hl)
    jp nz,_setReverse28 ; Leave res for reverse
_setForward28:
    set 5,a          ;%XXD43210
_setReverse28:       
    ld b,a
    set 6,b          ;Make speed command
    ld c,$0
    jp _JPBasedOffAddressSize 
    
    
_128Speed:
	ld a,e          ;save throttle value
	ld e,%00111111  ;Advanced Operations Instruction (100), sub 11111
	or a
	jr z,_128Speed_stopped
	inc a
_128Speed_stopped:
	and %01111110   ;clear bit 7 in case input speed was too large. This is reverse dir.
	ld hl,dccState.Flags
	bit Direction,(hl)
	jr nz,_128Speed_stayReversed
	or %10000000
_128Speed_stayReversed:
	ld d,a
	jp dccSend4db   ;generic send in DE. Selects long/short for us.
    
handleFunction:
    ret
	
	
handleNumpad:
	ld a,c
	sub 5
	jr c,_hnp_fg1         ;FL,F1-F4
	sub 8
	jr c,_hnp_fg2         ;F5-F8,F9-F12
	sub 8
	jr c,_hnp_fexp11110   ;F13-F20
	sub 8
	jr c,_hnp_fexp11111   ;F21-F28
	ld b,0
	ret
_hnp_fg1:
	ld a,(bankdata+0)
	rrca
	ld a,%00000100 ;instruction group one (100)
	ld hl,bankdata+5-1
_hnp_fgwrite1p4:
	rla            ;shift FL into what will be bit 4
	ld b,4
	call _hnp_construct_from_bank
	jp _hnp_send3bytes
_hnp_fg2:
	add a,4  ;carry set if second half is being used.
	ccf      ;which is the opposite of what we actually need. oops.
	ld hl,bankdata+5+4-1  ;Focus on F5-F8
	jr c,{+} ;if carry, then skip focusing on F9-F12.
	ld hl,bankdata+5+4+4-1
+:	ld a,%00000101 ;instruction group two (101)
	jr _hnp_fgwrite1p4
_hnp_fexp11110:  ;instruction group 110
	ld hl,bankdata+5+4+4+8-1
	ld e,%11011110
_hnp_fgwrite1p8:
	ld b,8
	xor a
	call _hnp_construct_from_bank
	ld d,b
	jp _hnp_send4bytes
_hnp_fexp11111:
	ld hl,bankdata+5+4+4+8+8-1
	ld e,%11011111
	jr _hnp_fgwrite1p8
	
_hnp_send3bytes:  ;entry: B=byteToSend
	ld a,(dccState.Flags)
	bit AddressSize,a
	jr nz,_hnpsend3bytes_longaddress
_hnpsend3bytes_shortaddress:
	ld c,0
	ld a,(dccState.address)
	jp dccSendShort3db
_hnpsend3bytes_longaddress:
	;
	;nothing here yet.
	;
	ret

dccSend4db:
_hnp_send4bytes:  ;entry: DE=bytepairtosend (L=first byte, H=second byte)
	ld a,(dccState.Flags)
	bit AddressSize,a
	jr nz,_hnpsend4bytes_longaddress
_hnpsend4bytes_shortaddress:
	ld c,0
	ld a,(dccState.address)
	jp dccSendShort4db
_hnpsend4bytes_longaddress:
	;
	;nothing here yet
	;
	ret
	
;in:  A=initialBitFieldState B=looplen, HL=startOfBankOffsetedFromEnd
;out: B=bits setfrom LSBtoMSB
_hnp_construct_from_bank:
	ld c,(hl)
	dec hl
	rrc c      ;shift out bit set.
	rla        ;shift in bit
	djnz _hnp_construct_from_bank
	ld b,a
	ret
	
	
	
	
	
	
	
	
	
	
	
    
PreparePacket:
    ;In e,amount of bytes in packet
    ;packetGenScratch packet bytes
    ld b,e                 ;save bytes in structure
    sla e \ sla e \ sla e  ; *8 == bitcount
    dec b                  ;ASSUME first byte is part of the preamble and gets no seperator
                           ; we loop from packet end
    ld hl,packetGenScratch  
    ld c,$FF
_preparePacketLoop:
    push de
        push bc
            push hl             ;Move in 8bits and insert next bit
                call insertBit  ;Call insert bits saving all registers
            pop hl
        pop bc
    pop de
    ld a,e
    sub 8
    ld e,a            ;Move to next byte
    ld c,0              ;Set c to insert 0 bits
    djnz _preparePacketLoop
    ret
    
	
	
	
dccSendShort4db:  ;in DE,data a,address c,repeat
	di
	ld hl,packetGenScratch+5
	push af
		xor e
		xor d
		ld (hl),a  ;+5 Error
		dec hl
		ld (hl),d  ;+4 Data-high
		dec hl
		ld (hl),e  ;+3 Data-Low
		dec hl
	pop af
	ld (hl),a  ;+2 Address
	dec hl
	ld a,255
	ld (hl),a  ;+1 Preamble
	dec hl
	ld (hl),a  ;+0 Preamble
	ld (dccState.curDat),a
	
	ld a,c
	ld (dccState.repeat),a
	ld a,44+9
	ld e,6
	jr _dccSendShort_ConstructPacketGeneric
	
dccSendShort3db:  ;in b,data a,address c,repeat
	di
	ld hl,packetGenScratch+4
	ld e,a
	xor b
	ld (hl),a ;+4 Error
	dec hl
	ld (hl),b ;+3 Speed command
	dec hl
	ld (hl),e ;+2 Address
	dec hl
	ld a,255
	ld (hl),a ;+1 preamble
	dec hl
	ld (hl),a ;+0 preamble
	ld (dccState.curDat),a
	
	ld a,c
	ld (dccState.repeat),a
	ld a,46
	ld e,5
	
;in: dccState setup, a=packetLenInBits, e=packetLengthInBytes
_dccSendShort_ConstructPacketGeneric:
	push hl
		push af
			call PreparePacket
		pop af
		ld hl,dccUserPacket
		ld (hl),a
		ld (dccState.msgPTR),hl
		inc hl
		ex de,hl
	pop hl
	ld bc,10
	ldir
    xor a
    ld (dccState.Size),a
    ld a,255
    ld (dccState.curDat),a
    ld a,WAITCOUNT
    ld (dccState.waitCTR),a

    ex af,af'
    xor a
    ex af,af'
	ei
	ret
	
	
	
	
	
	

dccSendLong3db:
    ret ;To be done
    

    
generateLUT:  ;in: DE=starting address. Must be 256-byte aligned.
	ld a,e
	rrca \ rrca \ rrca
	and 7
	ld (de),a
	ld a,e
	inc d
	cpl
	and 7
	ld b,a
	ld c,0
	ld a,1
	jr z,_genLutNoShift
_genLutShiftLeft:
	scf \ rl c
	rlca
	djnz _genLutShiftLeft
_genLutNoShift:
	ld (de),a
	inc d
	ld a,c
	ld (de),a
	dec d
	dec d
	inc e
	jr nz,generateLUT
	ret
    
;E = bitpos to insert
;C=0 to insert 0, C=$FF to insert 1. Destroys all registers
insertBit:  
    ld a,8*10
    ld (maxbits),a
	ld d,BitMask_LookupTables>>8
	ld a,(de)
	inc d       ;First LUT is: for(i=0;i<256;i++) arr1[i] = (i>>3)&7;
	add a,L
	ld L,a
	jr nc,$+3
	inc h       ;get address we need to perform insert op on
	inc c
	ld a,(de)   ;fetch masking bit. for(i=0;i<256;i++) arr2[i] = 1<<((~i)&7);
	jr z,insertBit1
insertBit0:
	cpl
	and (hl)    ;clear bit.
	ld (hl),a
	jr insertBitCont
insertBit1:
	or (hl)
	ld (hl),a   ;set bit
insertBitCont:
	inc d       ;Third LUT: Mask to keep bits. 7=%01111111 0=%00000000
	ld a,(maxbits)
	inc a
	ld (maxbits),a
	sub e       ;maxbits-bitcount
	rrca
	rrca
	rrca
	and %00011111
	inc a
	ld b,a     ;max number of bytes to iterate over
	ld a,(de)
	cpl        ;we may have needed those bits reversed. 1's are what we keep with old
	ld c,a
	ld a,(hl)
	rrc (hl)
	push af   ;keep bit that was pushed out retained
		xor (hl)  ;mask in old state
		and c
		xor (hl)
		ld (hl),a
	pop af
-:	inc hl
	rr (hl)
	djnz {-}
	ret
    
.align 16     ;This needs an alignment due to how I handle indexing
idlePacket:   ;Preformed idle packet
.db 44
.db %11111111
.db %11111110
.db %11111111
.db %00000000
.db %01111111
.db %11100000
estopPacket:
.db 44
.db %11111111
.db %11111110
.db %00000000
.db %00100000
.db %10010000
.db %01110000
.echoln "MODULE DCC  SIZE : ",$-_modulestart
.endlocal
.endmodule